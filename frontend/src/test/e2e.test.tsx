import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { BrowserRouter } from 'react-router-dom';
import App from '../App';

// Mock the snippet service for E2E tests
jest.mock('../services/snippetService', () => ({
  snippetService: {
    createSnippet: jest.fn(),
    getSnippet: jest.fn(),
    getAllSnippets: jest.fn()
  }
}));

const renderApp = () => {
  return render(
    <BrowserRouter>
      <App />
    </BrowserRouter>
  );
};

describe('E2E Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should display the main page with form and empty snippet list', () => {
    renderApp();
    
    // Check page header
    expect(screen.getByText(/snippet summarizer/i)).toBeInTheDocument();
    expect(screen.getByText(/ai-powered text summarization service/i)).toBeInTheDocument();
    
    // Check form elements
    expect(screen.getByLabelText(/text/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /create snippet/i })).toBeInTheDocument();
    
    // Check empty snippet list
    expect(screen.getByText(/no snippets created yet/i)).toBeInTheDocument();
  });

  it('should show validation error when submitting empty form', async () => {
    const user = userEvent.setup();
    renderApp();
    
    const submitButton = screen.getByRole('button', { name: /create snippet/i });
    await user.click(submitButton);
    
    expect(screen.getByText(/please enter some text/i)).toBeInTheDocument();
  });

  it('should successfully create a snippet and display it in the list', async () => {
    const user = userEvent.setup();
    const mockSnippet = {
      id: '1',
      text: 'This is a test snippet text',
      summary: 'This is a test summary generated by AI',
      createdAt: '2023-01-01T00:00:00Z',
      updatedAt: '2023-01-01T00:00:00Z'
    };
    
    // Mock the service to return our test snippet
    const { snippetService } = require('../services/snippetService');
    snippetService.createSnippet.mockResolvedValue(mockSnippet);
    
    renderApp();
    
    const textInput = screen.getByLabelText(/text/i);
    const submitButton = screen.getByRole('button', { name: /create snippet/i });
    
    // Fill and submit the form
    await user.type(textInput, 'This is a test snippet text');
    await user.click(submitButton);
    
    // Wait for the snippet to be created and displayed
    await waitFor(() => {
      expect(screen.getByText(/this is a test snippet text/i)).toBeInTheDocument();
      expect(screen.getByText(/this is a test summary generated by ai/i)).toBeInTheDocument();
    });
    
    // Verify the service was called correctly
    expect(snippetService.createSnippet).toHaveBeenCalledWith({
      text: 'This is a test snippet text'
    });
  });

  it('should show error message when API call fails', async () => {
    const user = userEvent.setup();
    
    // Mock the service to throw an error
    const { snippetService } = require('../services/snippetService');
    snippetService.createSnippet.mockRejectedValue(new Error('Network error'));
    
    renderApp();
    
    const textInput = screen.getByLabelText(/text/i);
    const submitButton = screen.getByRole('button', { name: /create snippet/i });
    
    // Fill and submit the form
    await user.type(textInput, 'This is a test snippet text');
    await user.click(submitButton);
    
    // Wait for error message to appear
    await waitFor(() => {
      expect(screen.getByText(/failed to create snippet/i)).toBeInTheDocument();
    });
    
    // Verify no snippet was added to the list
    expect(screen.getByText(/no snippets created yet/i)).toBeInTheDocument();
  });

  it('should clear form fields after successful submission', async () => {
    const user = userEvent.setup();
    const mockSnippet = {
      id: '1',
      text: 'This is a test snippet text',
      summary: 'This is a test summary generated by AI',
      createdAt: '2023-01-01T00:00:00Z',
      updatedAt: '2023-01-01T00:00:00Z'
    };
    
    const { snippetService } = require('../services/snippetService');
    snippetService.createSnippet.mockResolvedValue(mockSnippet);
    
    renderApp();
    
    const textInput = screen.getByLabelText(/text/i);
    const submitButton = screen.getByRole('button', { name: /create snippet/i });
    
    // Fill and submit the form
    await user.type(textInput, 'This is a test snippet text');
    await user.click(submitButton);
    
    // Wait for form to be cleared
    await waitFor(() => {
      expect(textInput).toHaveValue('');
    });
  });

  it('should display multiple snippets in the list', async () => {
    const user = userEvent.setup();
    const mockSnippet1 = {
      id: '1',
      text: 'First snippet text',
      summary: 'First snippet summary',
      createdAt: '2023-01-01T00:00:00Z',
      updatedAt: '2023-01-01T00:00:00Z'
    };
    
    const mockSnippet2 = {
      id: '2',
      text: 'Second snippet text',
      summary: 'Second snippet summary',
      createdAt: '2023-01-02T00:00:00Z',
      updatedAt: '2023-01-02T00:00:00Z'
    };
    
    const { snippetService } = require('../services/snippetService');
    snippetService.createSnippet
      .mockResolvedValueOnce(mockSnippet1)
      .mockResolvedValueOnce(mockSnippet2);
    
    renderApp();
    
    const textInput = screen.getByLabelText(/text/i);
    const submitButton = screen.getByRole('button', { name: /create snippet/i });
    
    // Create first snippet
    await user.type(textInput, 'First snippet text');
    await user.click(submitButton);
    
    // Wait for first snippet to appear
    await waitFor(() => {
      expect(screen.getByText(/first snippet text/i)).toBeInTheDocument();
    });
    
    // Create second snippet
    await user.type(textInput, 'Second snippet text');
    await user.click(submitButton);
    
    // Wait for second snippet to appear
    await waitFor(() => {
      expect(screen.getByText(/second snippet text/i)).toBeInTheDocument();
    });
    
    // Verify both snippets are displayed
    expect(screen.getByText(/first snippet text/i)).toBeInTheDocument();
    expect(screen.getByText(/second snippet text/i)).toBeInTheDocument();
  });
}); 